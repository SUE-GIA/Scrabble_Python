#STEFANOS PANAGIOTIS GIANNAKOS 3568
#This is the main class of the project. 
#It is the main menu of the game. 
# It is responsible for the flow of the game and the user's choices. 
# It also contains the guidelines of the code and the game. 
# It uses the classes.py file for the classes and the functions of the game.

import classes
import json

def print_menu():
    print("\n         MINI SCRABBLE GAME")
    print("************************************")
    print("         1: Σκορ")
    print("         2: Πληροφορίες κώδικα")
    print("         3: Παιχνίδι/ Παίξε")
    print("         4: Πληροφορίες παιχνιδιού")
    print("         q: Έξοδος")
    print("************************************")

def guidelines():
     """
    STEFANOS PANAGIOTIS GIANNAKOS 3568
    help(guidelines) has some trouble with the encoding in diferent enviroments. Use Pythons IDLE for the best result.

    ΟΝ/ΜΟ: ΣΤΕΦΑΝΟΣ ΠΑΝΑΓΙΩΤΗΣ ΓΙΑΝΝΑΚΟΣ
    ΑΕΜ: 3568

    !ΓΙΑ ΝΑ ΠΑΙΞΕΤΕ ΤΟ ΠΑΙΧΝΙΔΙ ΠΡΕΠΕΙ ΝΑ ΕΧΕΤΕ ΣΤΟΝ ΙΔΙΟ ΦΑΚΕΛΟ ΤΑ ΑΡΧΕΙΑ "greek7.txt", "userscores.json" και "classes.py"!

    Τα guidelines του κώδικα είναι τα εξής:
    >Αρχικά υλοποίηθηκαν οι κλάσεις SakClass, Player, Human, Computer, Game. 
    
    >Βασική κλάση Player. Κληρονομούν οι παράγωγες Human, Computer.

    >Μέθοδοι που επεκτήνουν τις κλάσεις:
        Κλάση SakClass:
            randomize_sak(): Ανακατεύει τα γράμματα στο σακουλάκι.
            putbackletters(self, player_letters): Επιστρέφει γράμματα στο σακουλάκι.
            getletters(self, NumLetters): Επιστρέφει γράμματα για τον παίκτη.
        Κλάση Computer:
            play_word(self, word, sak): Υλοποιεί τον τρόπο παιξίματος μιας λέξης από τον υπολογιστή.
            SMART_FAIL(self, dictionary): Υλοποιεί τη στρατηγική παιξίματος του υπολογιστή.
        Κλάση Human:
            play_word(self, dictionary, word, sak): Υλοποιεί τον τρόπο παιξίματος μιας λέξης από τον παίκτη.
            play(self, dictionary, sak): Επιτρέπει στον παίκτη να παίξει μια λέξη.
        Κλάση Game:
            game_score(word): Υπολογίζει τους πόντους μιας λέξης.
            setup(): Φορτώνει το λεξικό και υπολογίζει τους πόντους για κάθε λέξη.
            run(): Διαχειρίζεται τη ροή του παιχνιδιού.
            end(): Ολοκληρώνει το παιχνίδι και εμφανίζει το τελικό σκορ.
            replay(): Ξεκινάει ένα νέο παιχνίδι.
    
    >H μέθοδος measure_time() είναι ένας διακοσμητής που δέχεται μια συνάρτηση ως είσοδο και επιστρέφει μια νέα συνάρτηση (wrapper) που μετρά τον χρόνο εκτέλεσης της συνάρτησης εισόδου και τυπώνει τον χρόνο αυτόν. 
     Στη συνέχεια, ο διακοσμητής εφαρμόζεται στη μέθοδο play_word() της κλάσης Player. Κάθε φορά που καλείται η play_word(), ο διακοσμητής θα μετρήσει και θα εκτυπώσει τον χρόνο που απαιτείται για την εκτέλεσή της.

    >Σχετικά με την επιλογή Dictionary έναντι List, η χρήση Dictionary είναι πιο αποτελεσματική εδώ γιατί μας δίνει τη δυνατότητα να αναζητούμε λέξεις με βάση το κλειδί τους (δηλαδή την ίδια τη λέξη), 
     που είναι σημαντικό για γρήγορη πρόσβαση στις πληροφορίες. Αντίθετα, με μια λίστα, θα έπρεπε να ελέγχουμε κάθε λέξη ξεχωριστά, κάτι που θα έκανε τη διαδικασία πολύ πιο αργή, ειδικά όταν έχουμε μεγάλο αριθμό λέξεων.
     (Αναλυτικότερα, κατά την αρχικοποίηση του παιχνιδιού, η μέθοδος setup() φορτώνει το λεξικό από το αρχείο κειμένου που δόθηκε, το greek7.txt. 
     Κάθε γραμμή του αρχείου κειμένου περιέχει μία λέξη της ελληνικής γλώσσας. 
     Στη συνέχεια η εφαρμογή διαβάζει κάθε γραμμή, αφαιρεί τυχόν κενά ή άλλους χαρακτήρες και προσθέτει τη λέξη στο λεξικό ως κλειδί με την αντίστοιχη τιμή πόντων
     η οποία υπολογίζεται μέσω της μεθόδου game_score() της κλάσης Game)
    
    >Σχετικά με την επιλογή της στρατηγικής παιξίματος του υπολογιστή, η στρατηγική που επιλέχθηκε είναι η SMART_FAIL. 
        Η στρατηγική αυτή ελέγχει όλες τις δυνατές λέξεις από τα γράμματα του υπολογιστή.
        Αν η λέξη είναι έγκυρη και υπάρχει στο λεξικό, την προσθέτει σε μια λίστα δυνατών λέξεων.
        Επιστρέφουμε μία τυχαία έγκυρη λέξη από τη λίστα δυνατών λέξεων. Υλοποίθηκε έτσι για να μην είναι πάντα προβλέψιμος ο υπολογιστής.
        Δεν υπάρχει κίνδυνος να επναληφθεί η ίδια λέξη, γιατί οι πιθανές λέξεις είναι πολλές και διαφορετικές σε κάθε περίπτωση
        Αν δεν υπάρχει καμία έγκυρη λέξη, επιστρέφουμε "e" ως ένδειξη ότι ο υπολογιστής δεν μπορεί να παίξει καμία λέξη.
    """
     pass
    
guidelines.__doc__ = guidelines.__doc__.strip()

def wiki():
    wiki_info = """
    Το παιχνίδι Scrabble είναι ένα παιχνίδι λέξεων που παίζεται από δύο παίκτες, τον χρήστη (εσένα) και τον υπολογιστή. 
    Κάθε παίκτης παίρνει 7 γράμματα από το σακουλάκι και προσπαθεί να σχηματίσει λέξεις στο ταμπλό. 
    Ο παίκτης που έχει το μεγαλύτερο σκορ στο τέλος κερδίζει, όταν τελείωσουν τα γράμματα απο το σακουλάκι.
    """
    return wiki_info

def main():
    
    name = input("\nΠληκτρολόγησε το όνομά σου:")

    game = classes.Game(name)
    game.setup()

    while True:
        print_menu()
        choice = input("Επιλογή 1, 2, 3, 4, (q for exit): ")

        if choice == "1":
            if name in classes.users_scores:
                print("\n***Το highscore σου:", classes.users_scores[name])
            else:
                print("\nΔεν έχεις ακόμα κάποιο score...")
            input("Πατήστε Enter για να συνεχίσετε...\n")
              
        elif choice == "2":
            print("\nΠληροφορίες κώδικα/ guidelines:")
            print("************************************************")
            print(help(guidelines))
            print("************************************************")
            input("Πατήστε Enter για να συνεχίσετε...\n")

        elif choice == "3":
            print("\n***Θα παίξες εναντίον του υπολογιστή. Ο υπολογιστής δεν θα δίνει πάντα τις καλύτερες απαντήσεις...\n")
            end = game.run()
            game.replay()

        elif choice == "4":
            print("\nΠληροφορίες παιχνιδιού:")
            print("************************************************")
            print(wiki())
            print("************************************************")
            input("Πατήστε Enter για να συνεχίσετε...\n")
            
        elif choice == "q":
            print("\nΕυχαριστούμε που παίξατε! Ελπίζουμε να σας δούμε ξανά σύντομα!\n")
            break
        else:
            print("\nΑυτή η επιλογή δεν υπάρχει...\n")

if __name__ == "__main__":
    main()
